name: Spring Boot CI/CD with MySQL and Redis

on:
  push:
    branches:
      - master  # Change to 'master'
  pull_request:
    branches:
      - master  # Change to 'master'
  workflow_dispatch:  # Enable manual trigger

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      # Checkout the repository
      - name: Check out the repository
        uses: actions/checkout@v2

      # Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      # Install Docker and Docker Compose
      - name: Install Docker
        run: |
                sudo apt-get update
                sudo apt-get install -y docker.io
                sudo apt-get install -y docker-compose
          
      # Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Build the Spring Boot application
      - name: Build with Maven
        run: mvn clean package -DskipTests
        working-directory: DockerDemo

      # Build Docker images
      - name: Build Docker images
        run: docker compose build

      # Start MySQL, Redis, and Spring Boot application with Docker Compose
      - name: Start Docker Compose
        run: docker-compose up -d

      # Wait for MySQL and Redis to be ready
      - name: Wait for services to be ready
        run: sleep 30

      # Run integration tests
      - name: Run integration tests
        run: mvn verify

      # Shut down Docker Compose services
      - name: Shut down services
        run: docker-compose down
